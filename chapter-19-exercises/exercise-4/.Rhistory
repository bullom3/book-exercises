wealth_bottom_40 = SI.DST.04TH.20 + SI.DST.FRST.20,
wealth_top_10 = SI.DST.10TH.10)%>%
gather(
# Creates columns for top_10 and bottom_40, as well as gather into long frame.
us_income_years <- us_income_years %>%
#rename(
#wealth_top_10 = SI.DST.10TH.10) %>%
mutate(
wealth_bottom_40 = SI.DST.04TH.20 + SI.DST.FRST.20
wealth_top_10 = SI.DST.10TH.10)%>%
gather(
key = "wealth_distribution",
value = "value",
c("wealth_top_10","wealth_bottom_40" )
) %>%
# select(-SI.DST.04TH.20, -SI.DST.FRST.20)
View(us_income_years)
# Creates columns for top_10 and bottom_40, as well as gather into long frame.
us_income_years <- us_income_years %>%
#rename(
#wealth_top_10 = SI.DST.10TH.10) %>%
mutate(
wealth_bottom_40 = SI.DST.04TH.20 + SI.DST.FRST.20,
wealth_top_10 = SI.DST.10TH.10 )%>%
gather(
key = "wealth_distribution",
value = "value",
c("wealth_top_10","wealth_bottom_40" )
) %>%
# select(-SI.DST.04TH.20, -SI.DST.FRST.20)
View(us_income_years)
# Creates columns for top_10 and bottom_40, as well as gather into long frame.
us_income_years <- us_income_years %>%
#rename(
#wealth_top_10 = SI.DST.10TH.10) %>%
mutate(
wealth_bottom_40 = SI.DST.04TH.20 + SI.DST.FRST.20,
wealth_top_10 = SI.DST.10TH.10 )%>%
gather(
key = "wealth_distribution",
value = "value",
c("wealth_top_10","wealth_bottom_40" )
) %>%
# select(-SI.DST.04TH.20, -SI.DST.FRST.20)
View(us_income_years)
# Creates columns for top_10 and bottom_40, as well as gather into long frame.
us_income_years <- us_income_years %>%
rename(
wealth_top_10 = SI.DST.10TH.10) %>%
mutate(
wealth_bottom_40 = SI.DST.04TH.20 + SI.DST.FRST.20,)%>%
gather(
key = "wealth_distribution",
value = "value",
c("wealth_top_10","wealth_bottom_40" )
) %>%
select(-SI.DST.04TH.20, -SI.DST.FRST.20)
View(us_income_years)
###################################
# 3. US Income Equality over Time #
###################################
us_income_years <- (wb(country = "USA", indicator = c("SI.DST.04TH.20" ,"SI.DST.10TH.10", "SI.DST.FRST.20"),
mrv = 20, return_wide = TRUE ))
# Converting date column into numeric.
us_income_years$date <- as.numeric(us_income_years$date)
View(us_income_years)
# Creates columns for top_10 and bottom_40, as well as gather into long frame.
us_income_years <- us_income_years %>%
rename(
wealth_top_10 = SI.DST.10TH.10) %>%
mutate(
wealth_bottom_40 = SI.DST.04TH.20 + SI.DST.FRST.20,)%>%
gather(
key = "wealth_distribution",
value = "value",
c("wealth_top_10","wealth_bottom_40" )
) %>%
select(-SI.DST.04TH.20, -SI.DST.FRST.20)
View(us_income_years)
health_costs_plot <- ggplot(data = total_health_costs)+
geom_linerange(aes(ymin = 0, ymax = value))+
ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = indicator, color = indicator))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")
health_costs_plot <- ggplot(data = total_health_costs)+
geom_linerange(aes(ymin = 0, ymax = value))+
ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = indicator, color = indicator))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")
health_costs_plot <- ggplot(data = total_health_costs)+
geom_linerange(aes(ymin = 0, ymax = value))+
ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = indicator, color = indicator))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")
health_costs_plot
health_costs_plot <- ggplot(data = total_health_costs)+
geom_linerange(aes(ymin = 0, ymax = value))+
health_costs_plot <- ggplot(data = total_health_costs)+
geom_linerange(aes(ymin = 0, ymax = value))+
#ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = indicator, color = indicator))+
# geom_point(aes(shape = indicator))+
#scale_color_brewer(palette = "Dark2")
View(health_costs_plot)
health_costs_plot <- ggplot(data = total_health_costs)+
geom_linerange(aes(ymin = 0, ymax = value))+
#ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = indicator, color = indicator))+
# geom_point(aes(shape = indicator))+
#scale_color_brewer(palette = "Dark2")
View(health_costs_plot)
health_costs_plot <- ggplot(data = total_health_costs)+
geom_linerange(aes(ymin = 0, ymax = value))+
#ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = indicator, color = indicator))+
# geom_point(aes(shape = indicator))+
#scale_color_brewer(palette = "Dark2")
health_costs_plot
health_costs_plot <- ggplot(data = total_health_costs)+
geom_linerange(aes(ymin = 0, ymax = value))
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = indicator, color = indicator))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")
health_costs_plot
View(total_health_costs)
health_costs_plot <- ggplot(data = health_cost) +
geom_point(mapping = aes(x = reorder(iso3c, value), y = value, color = indicator))
health_costs_plot
health_costs_plot <- ggplot(data = health_cost) +
geom_point(mapping = aes(x = reorder(iso3c, value), y = value, color = indicator, shape = indicator))
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
geom_point(aes(shape = indicator))
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
geom_linerange(data = total_health_costs,mapping = aes(ymin = 0, ymax =vale))+
geom_point(aes(shape = indicator))
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
geom_linerange(data = total_health_costs,mapping = aes(ymin = 0, ymax =value))+
geom_point(aes(shape = indicator))
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
geom_linerange(data = total_health_costs,mapping = aes(ymin = 0, ymax =value))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")
health_costs_plot
health_costs_plot
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
geom_linerange(data = total_health_costs,mapping = aes(ymin = 0, ymax =value))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")+
labs(
title = "Health Costs",
x = "Country",
y = "Amount"
)+
scale_color_discrete(name = "Categories",
labels = c("Total Spending", "Government Spending", "Private Spending", "Out of Pocket Costs"))
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
geom_linerange(data = total_health_costs,mapping = aes(ymin = 0, ymax =value))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")+
labs(
title = "Health Costs",
x = "Country",
y = "Amount"
)+
theme(axis.title = element_text(size = 2, angle = 45))
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
geom_linerange(data = total_health_costs,mapping = aes(ymin = 0, ymax =value))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")+
labs(
title = "Health Costs",
x = "Country",
y = "Amount"
)+
theme(axis.title = element_text(size = 2, angle = 90))
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
geom_linerange(data = total_health_costs,mapping = aes(ymin = 0, ymax =value))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")+
labs(
title = "Health Costs",
x = "Country",
y = "Amount"
)
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
geom_linerange(data = total_health_costs,mapping = aes(ymin = 0, ymax =value))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")+
labs(
title = "Health Costs",
x = "Country",
y = "Amount"
)+
theme(axis.text.x = element_text(ssize = 2, angle = 90))
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
geom_linerange(data = total_health_costs,mapping = aes(ymin = 0, ymax =value))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")+
labs(
title = "Health Costs",
x = "Country",
y = "Amount"
)+
theme(axis.text.x = element_text(ssize = .5, angle = 90))
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
geom_linerange(data = total_health_costs,mapping = aes(ymin = 0, ymax =value))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")+
labs(
title = "Health Costs",
x = "Country",
y = "Amount"
)+
theme(axis.text.x = element_text(angle = 90, size = 2))
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
geom_linerange(data = total_health_costs,mapping = aes(ymin = 0, ymax =value))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")+
labs(
title = "Health Costs",
x = "Country",
y = "Amount"
)+
theme(axis.text.x = element_text(angle = 60, size = 5))
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
geom_linerange(data = total_health_costs,mapping = aes(ymin = 0, ymax =value))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")+
labs(
title = "Health Costs",
x = "Country",
y = "Amount"
)+
theme(axis.text.x = element_text(angle = 60, size = 10))
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
geom_linerange(data = total_health_costs,mapping = aes(ymin = 0, ymax =value))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")+
labs(
title = "Health Costs",
x = "Country",
y = "Amount"
)+
theme(axis.text.x = element_text(angle = 60, size = 9))
health_costs_plot
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
geom_linerange(data = total_health_costs,mapping = aes(ymin = 0, ymax =value))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")+
labs(
title = "Health Costs",
x = "Country",
y = "Amount"
)+
theme(axis.text.x = element_text(angle = 60, size = 9))
#####################################
# 4. Health Expenditures by Country #
#####################################
step_one <- wbcountries() %>%
filter(income ==  "High income") %>%
pull(iso3c)
# Updated data cache.
updated_cache <- wbcache()
health_cost <- wb(country = step_one, indicator = c("SH.XPD.CHEX.PC.CD", "SH.XPD.GHED.PC.CD",
"SH.XPD.PVTD.PC.CD", "SH.XPD.OOPC.PC.CD"),
mrv = 1, cache = updated_cache)
# Arranges health cost by value.
health_cost <- health_cost %>%
arrange(value)
# Replaces values in row for readability.
health_cost <- health_cost %>%
mutate(indicatorID = replace(indicatorID, indicatorID == "SH.XPD.CHEX.PC.CD", "Total Spending"),
indicatorID = replace(indicatorID, indicatorID == "SH.XPD.GHED.PC.CD", "Government Spending"),
indicatorID = replace(indicatorID, indicatorID == "SH.XPD.PVTD.PC.CD", "Private Spending"),
indicatorID = replace(indicatorID, indicatorID == "SH.XPD.OOPC.PC.CD", "Out of Pocket Costs"))
# Separte data frame for Total Spending.
total_health_costs <- health_cost %>%
filter(indicatorID == "Total Spending") %>%
select(iso3c:country)
health_costs_plot <- ggplot(data = health_cost, mapping = aes(x = reorder(iso3c, value), y = value, color = indicator )) +
geom_linerange(data = total_health_costs,mapping = aes(ymin = 0, ymax =value))+
geom_point(aes(shape = indicator))+
scale_color_brewer(palette = "Dark2")+
labs(
title = "Health Costs",
x = "Country",
y = "Amount"
)+
theme(axis.text.x = element_text(angle = 60, size = 9))
health_costs_plot
health_costs_plot
install.packages("Shiny")
install.packages("shiny")
library(shiny)
library("shiny")
library("shiny")
# Hey I'm User Interface.
ui <- fluidPage(
h1("Hello Shiny"),
textInput(inputId = "user_name", label = "What is your name?")
)
my_server <- function(input_list, output_list) {
}
#create and run the Shiny app.
shinyApp(ui = my_ui, server = my_server)
# Hey I'm User Interface.
my_ui <- fluidPage(
h1("Hello Shiny"),
textInput(inputId = "user_name", label = "What is your name?")
)
#create and run the Shiny app.
shinyApp(ui = my_ui, server = my_server)
# Hey I'm User Interface.
my_ui <- fluidPage(
h1("Hello Shiny"),
textInput(inputId = "user_name", label = "What is your name?")
textOutput(outputId = "message")
)
# Hey I'm User Interface.
my_ui <- fluidPage(
h1("Hello Shiny"),
textInput(inputId = "user_name", label = "What is your name?"),
textOutput(outputId = "message")
)
my_server <- function(input_list, output_list) {
#create some text for people to see
output_list$message <- renderText({
#find what the user typed in
greeting <- paste("Hello", input_list$user_name)
return(greeting)
})
}
#create and run the Shiny app.
shinyApp(ui = my_ui, server = my_server)
base_uri <- "https://www.ncei.noaa.gov"
endpoint <- "/cgi-bin/iso?id=gov.noaa.ncdc:c00674"
resource_uri <- paste0(base_uri, endpoint)
base_uri <- "https://www.ncei.noaa.gov"
endpoint <- "/cgi-bin/"
resource_uri <- paste0(base_uri, endpoint)
query_params <- "iso?id=gov.noaa.ncdc:c00674"
response <- GET(resource_uri, query = query_params)
library("httr")
base_uri <- "https://www.ncei.noaa.gov"
endpoint <- "/cgi-bin/"
resource_uri <- paste0(base_uri, endpoint)
query_params <- "iso?id=gov.noaa.ncdc:c00674"
response <- GET(resource_uri, query = query_params)
response
url <- "https://data.nodc.noaa.gov/cgi-bin/iso?id=gov.noaa.ncdc:C00674;view=xml;responseType=text/xml"
GET(url)
View(url)
responed <- GET(url)
responed
View(responed)
library("jsonlite")
responed_text <- content(responed, "text")
responed_text <- content(responed, "text")
responed_data <- fromJSON(responed_text)
data <- responed$date
View(data)
url <- "https://data.nodc.noaa.gov/cgi-bin/iso?id=gov.noaa.ncdc:C00674"
responed <- GET(url)
View(responed)
url <-  "https://gis.ncdc.noaa.gov/kml/normal_dly.kmz"
response <- GET(url)
View(response)
response
endpoint <- "/access/services/data/v1"
resource_uri <- paste0(base_uri, endpoint)
query_params <- "ncdc:C00674"
response <- GET(resource_uri, query =  query_params)
response
response <- GET(resource_uri)
response
response <- GET(resource_uri)
response
setwd("~/Desktop/project-report-rozgillie")
#Voter Data csv, and subsetting for 2016.
election_2016 <- read.csv("presidents_76_16.csv")
#Voter Data csv, and subsetting for 2016.
election_2016 <- read.csv("data/presidents_76_16.csv")
#Voter Data csv, and subsetting for 2016.
election_2016 <- read.csv("data/presidents_76_16.csv", stringsAsFactors = FALSE)
#Voter Data csv, and subsetting for 2016.
election_2016 <- read.csv("data/presidents_76_16.csv", stringsAsFactors = FALSE)
View(election_2016)
#Voter Data csv, and subsetting for 2016.
election_2016 <- read.csv("data/1976-2016-president.csv", stringsAsFactors = FALSE)
View(election_2016)
#Voter Data csv, and subsetting for 2016.
election_76_16 <- read.csv("data/1976-2016-president.csv", stringsAsFactors = FALSE)
View(election_76_16)
View(election_76_16)
election_2016 <- election_76_16 %>%
filter(year == 2016) %>%
select(year:totalvotes)
library(dplyr)
library(ggplot2)
library(tidyr)
library(maps)
election_2016 <- election_76_16 %>%
filter(year == 2016) %>%
select(year:totalvotes)
View(election_2016)
group_2016 <- group_by(state)
group_2016 <- election_2016 %>%
group_by(state)
View(group_2016)
group_2016 <- election_2016 %>%
group_by(party)
View(group_2016)
#   Subsetted 2016 data frame.
election_2016 <- election_76_16 %>%
filter(year == 2016) %>%
select(year:totalvotes)
#   Grouping of states.
group_2016 <- election_2016 %>%
group_by(party) %>%
summarize(
percent_rep <- (candidatevotes/totalvotes)*100
)
#   Grouping of states.
group_2016 <- election_2016 %>%
group_by(party) %>%
summarize(
percent_rep <- (candidatevotes/totalvotes)
)
library("shiny")
# Hey I'm User Interface.
my_ui <- fluidPage(
h1("Hello Shiny"),
textInput(inputId = "user_name", label = "What is your name?"),
textOutput(outputId = "message")
)
my_server <- function(input_list, output_list) {
#create some text for people to see
output_list$message <- renderText({
#find what the user typed in
greeting <- paste("Hello", input_list$user_name)
return(greeting)
})
}
#create and run the Shiny app.
shinyApp(ui = my_ui, server = my_server)
#create and run the Shiny app.
shinyApp(ui = my_ui, server = my_server)
# Hey I'm User Interface.
my_ui <- fluidPage(
h1("Hello Shiny"),
textInput(inputId = "user_name", label = "What is your name?"),
textInput(inputId = "food", label = "What's your favorite food?"),
textOutput(outputId = "message")
)
my_server <- function(input_list, output_list) {
#create some text for people to see
output_list$message <- renderText({
#find what the user typed in
greeting <- paste("Hello", input_list$user_name, "Have some" input_list$food)
return(greeting)
})
}
#create and run the Shiny app.
shinyApp(ui = my_ui, server = my_server)
#create and run the Shiny app.
shinyApp(ui = my_ui, server = my_server)
#create and run the Shiny app.
shinyApp(ui = my_ui, server = my_server)
runApp('~/Desktop/class_demo.27.R')
runApp('~/Desktop/class_demo.27.R')
# Load the `shiny` package
library("shiny")
runApp('~/Desktop/book-exercises/chapter-19-exercises/exercise-2')
runApp('~/Desktop/book-exercises/chapter-19-exercises/exercise-2')
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("app_ui.R")
source("app_server.R")
setwd("~/Desktop/book-exercises/chapter-19-exercises/exercise-4")
runApp('~/Desktop/book-exercises/chapter-19-exercises/exercise-4')
runApp('~/Desktop/book-exercises/chapter-19-exercises/exercise-4')
runApp('~/Desktop/book-exercises/chapter-19-exercises/exercise-4')
runApp('~/Desktop/book-exercises/chapter-19-exercises/exercise-4')
runApp('~/Desktop/book-exercises/chapter-19-exercises/exercise-4')
runApp('~/Desktop/book-exercises/chapter-19-exercises/exercise-4')
runApp('~/Desktop/book-exercises/chapter-19-exercises/exercise-4')
runApp('~/Desktop/book-exercises/chapter-19-exercises/exercise-4')
runApp('~/Desktop/book-exercises/chapter-19-exercises/exercise-4')
runApp('~/Desktop/book-exercises/chapter-19-exercises/exercise-4')
# Create a new `shinyApp()` using the loaded `ui` and `server` variables
shinyApp(ui = ui, server = server)
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("app_ui.R")
source("app_server.R")
runApp()
setwd("~/Desktop/book-exercises/chapter-19-exercises/exercise-4")
runApp()
